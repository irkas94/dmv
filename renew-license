import json
import boto3
from boto3.dynamodb.types import TypeDeserializer
from datetime import datetime

# Initialize AWS clients
dynamodb = boto3.client('dynamodb')
sns = boto3.client('sns')
deserializer = TypeDeserializer()

# Replace with your SNS Topic ARN
SNS_TOPIC_ARN = 'XXXXXXX'

def unmarshal_dynamodb_item(dynamodb_item):
    return {k: deserializer.deserialize(v) for k, v in dynamodb_item.items()}

def send_sns_notification(name, license_info):
    try:
        message = (f"License verification completed for {name}.\n"
                  f"License Number: {license_info.get('dlNumber', 'N/A')}\n"
                  f"Date of Birth: {license_info.get('dateOfBirth', 'N/A')}\n"
                  f"Expiration Date: {license_info.get('expirationDate', 'N/A')}")
        
        response = sns.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=message,
            Subject='License Verification Notification'
        )
        print(f"SNS notification sent: {response}")
        return True
    except Exception as e:
        print(f"Error sending SNS: {str(e)}")
        return False

def lambda_handler(event, context):
    try:
        def get_param(name):
            return next((p["value"] for p in event["parameters"] if p["name"] == name), None)

        # Get all three required fields
        full_name = get_param("name")
        license_number = get_param("DL-number")
        dob = get_param("dob")
        
        print(f"Input values - Name: {full_name}, License: {license_number}, DOB: {dob}")
        
        # Check if all required fields are present
        if not all([full_name, license_number, dob]):
            response_text = "All fields (name, license number, and date of birth) are required for verification."
        else:
            # Query DynamoDB with all three fields
            response = dynamodb.scan(
                TableName='LicenseUsers',
                FilterExpression='#name = :full_name AND #dl = :license AND #dob = :dob',
                ExpressionAttributeNames={
                    '#name': 'name',
                    '#dl': 'dlNumber ',  # Note the space if it exists in your table
                    '#dob': 'dateOfBirth'
                },
                ExpressionAttributeValues={
                    ':full_name': {'S': full_name},
                    ':license': {'S': license_number},
                    ':dob': {'S': dob}
                }
            )
            
            print(f"DynamoDB Response: {json.dumps(response, default=str)}")
            
            items = [unmarshal_dynamodb_item(item) for item in response.get('Items', [])]
            
            if not items:
                response_text = "Unable to verify license. Please ensure all information is correct and matches your license exactly."
            else:
                license_info = items[0]
                expiration_date = license_info.get('expirationDate', '')  # Note the space if it exists
                
                # Send SNS notification
                sns_sent = send_sns_notification(full_name, license_info)
                
                response_text = (
                    f"License {license_number} verified for {full_name}. "
                    f"Expires on {expiration_date}. "
                    f"{'Notification sent.' if sns_sent else 'Notification failed.'}"
                )

        return {
            "response": {
                "actionGroup": event.get("actionGroup", ""),
                "function": event.get("function", ""),
                "functionResponse": {
                    "responseBody": {
                        "TEXT": {
                            "body": response_text
                        }
                    }
                }
            },
            "messageVersion": event.get("messageVersion", "1.0")
        }

    except Exception as e:
        error_message = f"Error processing request: {str(e)}"
        print(error_message)
        return {
            "response": {
                "actionGroup": event.get("actionGroup", ""),
                "function": event.get("function", ""),
                "functionResponse": {
                    "responseBody": {
                        "TEXT": {
                            "body": error_message
                        }
                    }
                }
            },
            "messageVersion": event.get("messageVersion", "1.0")
        }
